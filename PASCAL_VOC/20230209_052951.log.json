{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.2+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2+cu111\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.25.0+", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'yolov3_d53_fp16_mstrain-608_273e_coco_20210517_213542-4bc34944.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=64)\nmodel = dict(\n    type='YOLOV3',\n    backbone=dict(\n        type='Darknet',\n        depth=53,\n        out_indices=(3, 4, 5),\n        init_cfg=dict(type='Pretrained', checkpoint='open-mmlab://darknet53')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[1024, 512, 256],\n        out_channels=[512, 256, 128]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=20,\n        in_channels=[512, 256, 128],\n        out_channels=[1024, 512, 256],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Expand', mean=[0, 0, 0], to_rgb=True, ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(type='Resize', img_scale=[(320, 320), (608, 608)], keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(608, 608),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='VOCDataset',\n        ann_file='data/VOC2012/ImageSets/Main/train.txt',\n        img_prefix='data/VOC2012',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Expand', mean=[0, 0, 0], to_rgb=True,\n                ratio_range=(1, 2)),\n            dict(\n                type='MinIoURandomCrop',\n                min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                min_crop_size=0.3),\n            dict(\n                type='Resize',\n                img_scale=[(320, 320), (608, 608)],\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='VOCDataset',\n        ann_file='data/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='data/VOC2012',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='data/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='data/VOC2012',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(608, 608),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\noptimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\nevaluation = dict(interval=1, metric=['mAP'])\nfp16 = dict(loss_scale='dynamic')\nwork_dir = './work_dirs/config_voc'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 2124557181, "exp_name": "config_voc.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 4063, "data_time": 0.03745, "loss_cls": 91.70237, "loss_conf": 414.27829, "loss_xy": 54.88334, "loss_wh": 11.17012, "loss": 572.03412, "grad_norm": NaN, "time": 0.27314}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0001, "memory": 4063, "data_time": 0.00795, "loss_cls": 89.59019, "loss_conf": 218.52563, "loss_xy": 55.93643, "loss_wh": 6.63052, "loss": 370.68278, "grad_norm": 527.60309, "time": 0.23565}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0001, "memory": 4063, "data_time": 0.00771, "loss_cls": 81.77467, "loss_conf": 152.09441, "loss_xy": 55.69056, "loss_wh": 4.62299, "loss": 294.18264, "grad_norm": 504.09589, "time": 0.23956}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0001, "memory": 4063, "data_time": 0.00823, "loss_cls": 75.69214, "loss_conf": 116.01222, "loss_xy": 53.31385, "loss_wh": 3.73082, "loss": 248.74902, "grad_norm": Infinity, "time": 0.23241}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 4063, "data_time": 0.00848, "loss_cls": 71.31317, "loss_conf": 98.55131, "loss_xy": 54.55855, "loss_wh": 3.60338, "loss": 228.02641, "grad_norm": 605.02232, "time": 0.23373}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0001, "memory": 4063, "data_time": 0.00759, "loss_cls": 64.29206, "loss_conf": 85.36127, "loss_xy": 51.64311, "loss_wh": 3.03709, "loss": 204.33353, "grad_norm": 629.45158, "time": 0.23245}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0001, "memory": 4063, "data_time": 0.00746, "loss_cls": 65.15556, "loss_conf": 82.77776, "loss_xy": 52.08951, "loss_wh": 3.20644, "loss": 203.22927, "grad_norm": 666.76422, "time": 0.23287}
{"mode": "val", "epoch": 1, "iter": 5823, "lr": 0.0001, "mAP": 0.15921, "AP50": 0.159}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 4063, "data_time": 0.03607, "loss_cls": 64.42224, "loss_conf": 76.77044, "loss_xy": 51.84632, "loss_wh": 2.84697, "loss": 195.88597, "grad_norm": 678.1173, "time": 0.25357}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 4063, "data_time": 0.00722, "loss_cls": 61.742, "loss_conf": 71.9323, "loss_xy": 50.08447, "loss_wh": 2.82309, "loss": 186.58185, "grad_norm": 714.30959, "time": 0.22777}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 4063, "data_time": 0.00719, "loss_cls": 58.08353, "loss_conf": 67.2253, "loss_xy": 49.58683, "loss_wh": 2.49019, "loss": 177.38585, "grad_norm": 690.23315, "time": 0.23492}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 4063, "data_time": 0.00707, "loss_cls": 60.05829, "loss_conf": 67.75939, "loss_xy": 50.69087, "loss_wh": 2.69363, "loss": 181.20218, "grad_norm": Infinity, "time": 0.2276}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0001, "memory": 4063, "data_time": 0.0072, "loss_cls": 59.53864, "loss_conf": 66.65777, "loss_xy": 51.68635, "loss_wh": 2.97341, "loss": 180.85616, "grad_norm": 707.26043, "time": 0.23682}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0001, "memory": 4063, "data_time": 0.00694, "loss_cls": 54.77658, "loss_conf": 61.76298, "loss_xy": 48.59877, "loss_wh": 2.41549, "loss": 167.55383, "grad_norm": 710.202, "time": 0.23072}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.0001, "memory": 4063, "data_time": 0.00698, "loss_cls": 56.79258, "loss_conf": 63.21517, "loss_xy": 51.52634, "loss_wh": 2.75701, "loss": 174.2911, "grad_norm": 746.87478, "time": 0.22929}
{"mode": "val", "epoch": 2, "iter": 5823, "lr": 0.0001, "mAP": 0.3161, "AP50": 0.316}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 4063, "data_time": 0.03618, "loss_cls": 55.18589, "loss_conf": 61.1033, "loss_xy": 51.44296, "loss_wh": 2.53246, "loss": 170.26461, "grad_norm": 748.92221, "time": 0.25307}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 4063, "data_time": 0.00699, "loss_cls": 56.803, "loss_conf": 60.13344, "loss_xy": 50.41989, "loss_wh": 2.63594, "loss": 169.99227, "grad_norm": 761.13415, "time": 0.23036}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0001, "memory": 4063, "data_time": 0.007, "loss_cls": 52.04734, "loss_conf": 54.17334, "loss_xy": 49.11032, "loss_wh": 2.39427, "loss": 157.72527, "grad_norm": 761.41084, "time": 0.2252}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 4063, "data_time": 0.00691, "loss_cls": 49.90991, "loss_conf": 54.78084, "loss_xy": 48.29905, "loss_wh": 2.55433, "loss": 155.54414, "grad_norm": 757.87156, "time": 0.22839}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.0001, "memory": 4063, "data_time": 0.00687, "loss_cls": 49.00306, "loss_conf": 57.14529, "loss_xy": 48.93254, "loss_wh": 2.67269, "loss": 157.75357, "grad_norm": 808.68183, "time": 0.22596}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.0001, "memory": 4063, "data_time": 0.00675, "loss_cls": 48.51451, "loss_conf": 56.55752, "loss_xy": 47.99192, "loss_wh": 2.4557, "loss": 155.51965, "grad_norm": 811.01437, "time": 0.22893}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.0001, "memory": 4063, "data_time": 0.00676, "loss_cls": 48.39924, "loss_conf": 53.59642, "loss_xy": 50.46267, "loss_wh": 2.32173, "loss": 154.78005, "grad_norm": 775.33034, "time": 0.22929}
{"mode": "val", "epoch": 3, "iter": 5823, "lr": 0.0001, "mAP": 0.42856, "AP50": 0.429}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 4063, "data_time": 0.03699, "loss_cls": 46.54047, "loss_conf": 53.27242, "loss_xy": 48.63476, "loss_wh": 2.26592, "loss": 150.71358, "grad_norm": 794.84582, "time": 0.26194}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 4063, "data_time": 0.00669, "loss_cls": 48.87734, "loss_conf": 55.21251, "loss_xy": 51.24368, "loss_wh": 2.52623, "loss": 157.85976, "grad_norm": 828.87586, "time": 0.22421}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 4063, "data_time": 0.00696, "loss_cls": 48.62071, "loss_conf": 55.17555, "loss_xy": 51.62421, "loss_wh": 2.52299, "loss": 157.94347, "grad_norm": 820.86384, "time": 0.22803}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0001, "memory": 4063, "data_time": 0.007, "loss_cls": 41.74258, "loss_conf": 47.85458, "loss_xy": 45.36742, "loss_wh": 2.29059, "loss": 137.25517, "grad_norm": 752.55794, "time": 0.23012}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0001, "memory": 4063, "data_time": 0.00677, "loss_cls": 42.24975, "loss_conf": 49.99611, "loss_xy": 47.5671, "loss_wh": 2.13532, "loss": 141.94828, "grad_norm": 788.29107, "time": 0.22273}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.0001, "memory": 4063, "data_time": 0.0071, "loss_cls": 40.80903, "loss_conf": 46.08414, "loss_xy": 45.95172, "loss_wh": 1.99142, "loss": 134.8363, "grad_norm": 763.36793, "time": 0.23494}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.0001, "memory": 4063, "data_time": 0.00699, "loss_cls": 44.3156, "loss_conf": 51.03098, "loss_xy": 49.17319, "loss_wh": 2.12416, "loss": 146.64393, "grad_norm": 807.14995, "time": 0.22848}
{"mode": "val", "epoch": 4, "iter": 5823, "lr": 0.0001, "mAP": 0.53527, "AP50": 0.535}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 4063, "data_time": 0.03711, "loss_cls": 43.19689, "loss_conf": 51.65033, "loss_xy": 50.1936, "loss_wh": 2.32493, "loss": 147.36574, "grad_norm": 856.06655, "time": 0.25774}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 4063, "data_time": 0.00674, "loss_cls": 40.20986, "loss_conf": 49.10803, "loss_xy": 47.91032, "loss_wh": 2.10868, "loss": 139.33689, "grad_norm": 799.14394, "time": 0.23165}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0001, "memory": 4063, "data_time": 0.0069, "loss_cls": 43.70251, "loss_conf": 54.21587, "loss_xy": 51.34073, "loss_wh": 2.32424, "loss": 151.58335, "grad_norm": 888.97994, "time": 0.2295}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 4063, "data_time": 0.0069, "loss_cls": 40.54538, "loss_conf": 48.9453, "loss_xy": 48.43667, "loss_wh": 2.24951, "loss": 140.17687, "grad_norm": Infinity, "time": 0.22546}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.0001, "memory": 4063, "data_time": 0.0069, "loss_cls": 38.98843, "loss_conf": 49.22329, "loss_xy": 48.98614, "loss_wh": 2.26051, "loss": 139.45838, "grad_norm": 823.84223, "time": 0.22845}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.0001, "memory": 4063, "data_time": 0.0069, "loss_cls": 41.26844, "loss_conf": 50.01205, "loss_xy": 50.22691, "loss_wh": 2.23876, "loss": 143.74616, "grad_norm": 810.94831, "time": 0.22884}
{"mode": "train", "epoch": 5, "iter": 700, "lr": 0.0001, "memory": 4063, "data_time": 0.00684, "loss_cls": 37.02276, "loss_conf": 45.53179, "loss_xy": 46.4254, "loss_wh": 1.99735, "loss": 130.9773, "grad_norm": 817.10927, "time": 0.2263}
{"mode": "val", "epoch": 5, "iter": 5823, "lr": 0.0001, "mAP": 0.59322, "AP50": 0.593}
