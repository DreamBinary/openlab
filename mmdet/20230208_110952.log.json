{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.2+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2+cu111\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.25.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/train.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'work_dir'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1848856858, "exp_name": "ballon.py"}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00078, "memory": 3705, "data_time": 0.13194, "loss_rpn_cls": 0.12018, "loss_rpn_bbox": 0.0281, "loss_cls": 0.44518, "acc": 83.47656, "loss_bbox": 0.25925, "loss_mask": 4.84133, "loss": 5.69404, "time": 0.31559}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.078, "bbox_mAP_50": 0.18, "bbox_mAP_75": 0.04, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.016, "bbox_mAP_l": 0.102, "bbox_mAP_copypaste": "0.078 0.180 0.040 0.000 0.016 0.102", "segm_mAP": 0.094, "segm_mAP_50": 0.175, "segm_mAP_75": 0.086, "segm_mAP_s": 0.0, "segm_mAP_m": 0.005, "segm_mAP_l": 0.132, "segm_mAP_copypaste": "0.094 0.175 0.086 0.000 0.005 0.132"}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00202, "memory": 3854, "data_time": 0.13824, "loss_rpn_cls": 0.05429, "loss_rpn_bbox": 0.02955, "loss_cls": 0.2547, "acc": 89.84863, "loss_bbox": 0.3905, "loss_mask": 0.28179, "loss": 1.01083, "time": 0.31116}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.245, "bbox_mAP_50": 0.499, "bbox_mAP_75": 0.187, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.091, "bbox_mAP_l": 0.322, "bbox_mAP_copypaste": "0.245 0.499 0.187 0.000 0.091 0.322", "segm_mAP": 0.353, "segm_mAP_50": 0.493, "segm_mAP_75": 0.385, "segm_mAP_s": 0.0, "segm_mAP_m": 0.102, "segm_mAP_l": 0.461, "segm_mAP_copypaste": "0.353 0.493 0.385 0.000 0.102 0.461"}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00326, "memory": 3854, "data_time": 0.14085, "loss_rpn_cls": 0.02825, "loss_rpn_bbox": 0.02544, "loss_cls": 0.19502, "acc": 90.82031, "loss_bbox": 0.36152, "loss_mask": 0.19814, "loss": 0.80836, "time": 0.31106}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.435, "bbox_mAP_50": 0.688, "bbox_mAP_75": 0.527, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.286, "bbox_mAP_l": 0.531, "bbox_mAP_copypaste": "0.435 0.688 0.527 0.000 0.286 0.531", "segm_mAP": 0.577, "segm_mAP_50": 0.691, "segm_mAP_75": 0.637, "segm_mAP_s": 0.0, "segm_mAP_m": 0.275, "segm_mAP_l": 0.707, "segm_mAP_copypaste": "0.577 0.691 0.637 0.000 0.275 0.707"}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.0045, "memory": 3887, "data_time": 0.13754, "loss_rpn_cls": 0.0174, "loss_rpn_bbox": 0.01945, "loss_cls": 0.13222, "acc": 94.99512, "loss_bbox": 0.22934, "loss_mask": 0.27053, "loss": 0.66894, "time": 0.31111}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.65, "bbox_mAP_50": 0.824, "bbox_mAP_75": 0.757, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.461, "bbox_mAP_l": 0.741, "bbox_mAP_copypaste": "0.650 0.824 0.757 0.000 0.461 0.741", "segm_mAP": 0.68, "segm_mAP_50": 0.824, "segm_mAP_75": 0.76, "segm_mAP_s": 0.0, "segm_mAP_m": 0.47, "segm_mAP_l": 0.775, "segm_mAP_copypaste": "0.680 0.824 0.760 0.000 0.470 0.775"}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00573, "memory": 3887, "data_time": 0.1351, "loss_rpn_cls": 0.01235, "loss_rpn_bbox": 0.01833, "loss_cls": 0.10015, "acc": 95.83496, "loss_bbox": 0.12499, "loss_mask": 0.13865, "loss": 0.39447, "time": 0.31478}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.672, "bbox_mAP_50": 0.827, "bbox_mAP_75": 0.78, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.498, "bbox_mAP_l": 0.753, "bbox_mAP_copypaste": "0.672 0.827 0.780 0.353 0.498 0.753", "segm_mAP": 0.741, "segm_mAP_50": 0.827, "segm_mAP_75": 0.827, "segm_mAP_s": 0.177, "segm_mAP_m": 0.505, "segm_mAP_l": 0.838, "segm_mAP_copypaste": "0.741 0.827 0.827 0.177 0.505 0.838"}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00697, "memory": 3887, "data_time": 0.14721, "loss_rpn_cls": 0.00571, "loss_rpn_bbox": 0.01817, "loss_cls": 0.07331, "acc": 97.14844, "loss_bbox": 0.11164, "loss_mask": 0.11088, "loss": 0.31972, "time": 0.32943}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.724, "bbox_mAP_50": 0.865, "bbox_mAP_75": 0.865, "bbox_mAP_s": 0.303, "bbox_mAP_m": 0.477, "bbox_mAP_l": 0.808, "bbox_mAP_copypaste": "0.724 0.865 0.865 0.303 0.477 0.808", "segm_mAP": 0.763, "segm_mAP_50": 0.851, "segm_mAP_75": 0.851, "segm_mAP_s": 0.202, "segm_mAP_m": 0.496, "segm_mAP_l": 0.844, "segm_mAP_copypaste": "0.763 0.851 0.851 0.202 0.496 0.844"}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00821, "memory": 3887, "data_time": 0.13992, "loss_rpn_cls": 0.00757, "loss_rpn_bbox": 0.01545, "loss_cls": 0.07063, "acc": 97.33887, "loss_bbox": 0.11038, "loss_mask": 0.09869, "loss": 0.30272, "time": 0.31597}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.666, "bbox_mAP_50": 0.818, "bbox_mAP_75": 0.78, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.421, "bbox_mAP_l": 0.765, "bbox_mAP_copypaste": "0.666 0.818 0.780 0.000 0.421 0.765", "segm_mAP": 0.723, "segm_mAP_50": 0.818, "segm_mAP_75": 0.798, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4, "segm_mAP_l": 0.837, "segm_mAP_copypaste": "0.723 0.818 0.798 0.000 0.400 0.837"}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00945, "memory": 3932, "data_time": 0.13579, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.0165, "loss_cls": 0.06268, "acc": 97.61719, "loss_bbox": 0.11139, "loss_mask": 0.10057, "loss": 0.29536, "time": 0.31741}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.637, "bbox_mAP_50": 0.848, "bbox_mAP_75": 0.771, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.591, "bbox_mAP_l": 0.679, "bbox_mAP_copypaste": "0.637 0.848 0.771 0.353 0.591 0.679", "segm_mAP": 0.709, "segm_mAP_50": 0.848, "segm_mAP_75": 0.807, "segm_mAP_s": 0.202, "segm_mAP_m": 0.578, "segm_mAP_l": 0.768, "segm_mAP_copypaste": "0.709 0.848 0.807 0.202 0.578 0.768"}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.01069, "memory": 3932, "data_time": 0.14067, "loss_rpn_cls": 0.00271, "loss_rpn_bbox": 0.01163, "loss_cls": 0.05997, "acc": 97.8125, "loss_bbox": 0.11235, "loss_mask": 0.10154, "loss": 0.2882, "time": 0.31949}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.01113, "bbox_mAP": 0.62, "bbox_mAP_50": 0.81, "bbox_mAP_75": 0.736, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.557, "bbox_mAP_l": 0.677, "bbox_mAP_copypaste": "0.620 0.810 0.736 0.202 0.557 0.677", "segm_mAP": 0.695, "segm_mAP_50": 0.801, "segm_mAP_75": 0.768, "segm_mAP_s": 0.303, "segm_mAP_m": 0.558, "segm_mAP_l": 0.766, "segm_mAP_copypaste": "0.695 0.801 0.768 0.303 0.558 0.766"}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.01193, "memory": 3932, "data_time": 0.13695, "loss_rpn_cls": 0.00423, "loss_rpn_bbox": 0.01758, "loss_cls": 0.06879, "acc": 97.23633, "loss_bbox": 0.12618, "loss_mask": 0.10274, "loss": 0.31953, "time": 0.31762}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.01237, "bbox_mAP": 0.67, "bbox_mAP_50": 0.823, "bbox_mAP_75": 0.8, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.602, "bbox_mAP_l": 0.736, "bbox_mAP_copypaste": "0.670 0.823 0.800 0.101 0.602 0.736", "segm_mAP": 0.721, "segm_mAP_50": 0.823, "segm_mAP_75": 0.8, "segm_mAP_s": 0.081, "segm_mAP_m": 0.621, "segm_mAP_l": 0.802, "segm_mAP_copypaste": "0.721 0.823 0.800 0.081 0.621 0.802"}
